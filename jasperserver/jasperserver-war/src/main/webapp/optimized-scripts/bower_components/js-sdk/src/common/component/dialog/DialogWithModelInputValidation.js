define(["require","jquery","underscore","./Dialog","backbone.validation"],function(e){var t=e("jquery"),a=e("underscore"),r=e("./Dialog"),i=e("backbone.validation");return r.extend({events:a.extend({"keyup input[type=text], textarea, select":"updateModelProperty","change input[type=text], input:checkbox, textarea, select":"updateModelProperty"},r.prototype.events),updateModelProperty:function(e){var a={},r=t(e.target);"input"===r[0].tagName.toLowerCase()&&"text"===r.attr("type")||"select"===r[0].tagName.toLowerCase()&&"true"!==r.attr("multiple")||"textarea"===r[0].tagName.toLowerCase()?a[r.attr("name")]=t.trim(r.val()):"input"===r[0].tagName.toLowerCase()&&"checkbox"===r.attr("type")&&(a[r.attr("name")]=r.is(":checked")),this.beforeModelPropertySet&&this.beforeModelPropertySet(a),this.model.set(a),this.model.validate(a)},bindValidation:function(){i.bind(this,{valid:this.fieldIsValid,invalid:this.fieldIsInvalid,forceUpdate:!0,selector:"name"})},unbindValidation:function(){i.unbind(this)},fieldIsValid:function(e,t,a){var r=e.$("["+a+'="'+t+'"]').parent();r.removeClass("error"),r.find(".message.warning").text("")},fieldIsInvalid:function(e,t,a,r){var i=e.$("["+r+'="'+t+'"]').parent();i.addClass("error"),i.find(".message.warning").text(a.toString())},clearValidationErrors:function(){this.$("label").removeClass("error"),this.$(".message.warning").text("")},remove:function(){this.unbindValidation(),r.prototype.remove.apply(this,arguments)}})});